- name: Deploy AIQUM OVA for DHCP tasks.
  no_log: true
  community.vmware.vmware_deploy_ovf:
    hostname: "{{ vc_hostname }}"
    username: "{{ vc_username }}"
    password: "{{ vc_password }}"
    validate_certs: no
    ovf: "{{ ovf_path }}"
    networks: {"nat": '{{vm_network}}'}
    cluster: "{{ vc_cluster_name }}"
    datacenter: "{{ datacenter_name }}"
    datastore: "{{ datastore_name }}"
    name: "{{ aiqum_vm_name }}"
    power_on: yes
    wait_for_ip_address: false
    allow_duplicates: no
    inject_ovf_env: yes
    properties:
             org.linuxdistx.HostFQDN: '{{ aiqum_vm_name }}.{{ domain_name }}'
             org.linuxdistx.TimeZone: '{{ TimeZone }}'
             org.linuxdistx.UserName: '{{ aiqumuser }}'
             org.linuxdistx.UserPasswd: '{{ aiqumpassword }}'
  delegate_to: localhost
  tags:
    - deploy_ova_dhcp_ip

- name: Pausing for Network and services to start
  pause:
    minutes: 10
  tags:
    - deploy_ova_dhcp_ip

- name: Get VM MAC address to gather DHCP IP in later tasks.
  no_log: true
  block:
    - name: Get VM MAC address and create a variable for DHCP IP to be used later. 
      community.vmware.vmware_vm_info:
        hostname: "{{ vc_hostname }}"
        username: "{{ vc_username }}"
        password: "{{ vc_password }}"
        validate_certs: no
        vm_type: vm
        show_attribute: no
      delegate_to: localhost
      register: vm_info
    - set_fact:
        get_mac: "{{ item.mac_address[0] }}"
      with_items:
        - "{{ vm_info.virtual_machines | json_query(query) }}"
      vars:
        query: "[?guest_name=='{{ aiqum_vm_name }}']"
  tags:
    - deploy_ova_dhcp_ip
    - guest_facts
    - get_mac

- name: Get DHCP of AIQUM VM.
  set_fact:
    dhcp_ip: "{{ item.vm_network[get_mac].ipv4[0] }}"
  with_items:
    - "{{ vm_info.virtual_machines | json_query(query) }}"
  vars:
    query: "[?guest_name== '{{ aiqum_vm_name }}' ]"
  tags:
    - deploy_ova_dhcp_ip
    - guest_facts
    - get_dhcp

- name: Encode username and password and create variable to pass to the add ONTAP cluster task
  no_log: true
  shell: "echo  {{ (aiqumuser + ':' + aiqumpassword) | b64encode }}"
  delegate_to: localhost
  register: auth_token_aiqum
  tags:
    - deploy_ova_dhcp_ip
    - aiqum_cluster

- name: Add an ONTAP cluster to AIQUM with API
  no_log: true
  uri:
    url: "https://{{ dhcp_ip }}/api/admin/datasources/clusters"
    validate_certs: false
    method: POST
    body_format: json
    body:
      address: '{{ ontap_cluster_address }}'
      password: '{{ ontap_cluster_password }}'
      port: '{{ cluster_port }}'
      protocol: '{{ cluster_protocol }}'
      username: '{{ ontap_cluster_username }}'
    status_code: [201,204]
    headers:
      authorization: Basic {{ auth_token_aiqum.stdout }}
  retries: 15
  delay: 60
  register: result
  until: result is succeeded
  tags:
    - deploy_ova_dhcp_ip
    - aiqum_cluster
